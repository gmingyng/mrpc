// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fmsg_2eproto;
namespace mrpc {
class AccountInfo;
class AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class InfoUpdateRequest;
class InfoUpdateRequestDefaultTypeInternal;
extern InfoUpdateRequestDefaultTypeInternal _InfoUpdateRequest_default_instance_;
class InfoUpdateResponse;
class InfoUpdateResponseDefaultTypeInternal;
extern InfoUpdateResponseDefaultTypeInternal _InfoUpdateResponse_default_instance_;
}  // namespace mrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::mrpc::AccountInfo* Arena::CreateMaybeMessage<::mrpc::AccountInfo>(Arena*);
template<> ::mrpc::InfoUpdateRequest* Arena::CreateMaybeMessage<::mrpc::InfoUpdateRequest>(Arena*);
template<> ::mrpc::InfoUpdateResponse* Arena::CreateMaybeMessage<::mrpc::InfoUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mrpc {

enum RpcErrCode : int {
  RPC_ERR_SUCCESS = 0,
  RPC_ERR_NOTFOUND = 1,
  RPC_ERR_TIMEOUT = 2,
  RpcErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcErrCode_IsValid(int value);
constexpr RpcErrCode RpcErrCode_MIN = RPC_ERR_SUCCESS;
constexpr RpcErrCode RpcErrCode_MAX = RPC_ERR_TIMEOUT;
constexpr int RpcErrCode_ARRAYSIZE = RpcErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcErrCode_descriptor();
template<typename T>
inline const std::string& RpcErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcErrCode_descriptor(), enum_t_value);
}
inline bool RpcErrCode_Parse(
    const std::string& name, RpcErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcErrCode>(
    RpcErrCode_descriptor(), name, value);
}
// ===================================================================

class AccountInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.AccountInfo) */ {
 public:
  inline AccountInfo() : AccountInfo(nullptr) {};
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountInfo* New() const final {
    return CreateMaybeMessage<AccountInfo>(nullptr);
  }

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.AccountInfo";
  }
  protected:
  explicit AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:mrpc.AccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class InfoUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.InfoUpdateRequest) */ {
 public:
  inline InfoUpdateRequest() : InfoUpdateRequest(nullptr) {};
  virtual ~InfoUpdateRequest();

  InfoUpdateRequest(const InfoUpdateRequest& from);
  InfoUpdateRequest(InfoUpdateRequest&& from) noexcept
    : InfoUpdateRequest() {
    *this = ::std::move(from);
  }

  inline InfoUpdateRequest& operator=(const InfoUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoUpdateRequest& operator=(InfoUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfoUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const InfoUpdateRequest*>(
               &_InfoUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InfoUpdateRequest& a, InfoUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoUpdateRequest* New() const final {
    return CreateMaybeMessage<InfoUpdateRequest>(nullptr);
  }

  InfoUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoUpdateRequest& from);
  void MergeFrom(const InfoUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.InfoUpdateRequest";
  }
  protected:
  explicit InfoUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kNewDescriptionFieldNumber = 4,
    kInfoFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string method_name = 2;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method_name(
      std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string new_description = 4;
  void clear_new_description();
  const std::string& new_description() const;
  void set_new_description(const std::string& value);
  void set_new_description(std::string&& value);
  void set_new_description(const char* value);
  void set_new_description(const char* value, size_t size);
  std::string* mutable_new_description();
  std::string* release_new_description();
  void set_allocated_new_description(std::string* new_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_description(
      std::string* new_description);
  private:
  const std::string& _internal_new_description() const;
  void _internal_set_new_description(const std::string& value);
  std::string* _internal_mutable_new_description();
  public:

  // .mrpc.AccountInfo info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::mrpc::AccountInfo& info() const;
  ::mrpc::AccountInfo* release_info();
  ::mrpc::AccountInfo* mutable_info();
  void set_allocated_info(::mrpc::AccountInfo* info);
  private:
  const ::mrpc::AccountInfo& _internal_info() const;
  ::mrpc::AccountInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::mrpc::AccountInfo* info);
  ::mrpc::AccountInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:mrpc.InfoUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_description_;
  ::mrpc::AccountInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class InfoUpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.InfoUpdateResponse) */ {
 public:
  inline InfoUpdateResponse() : InfoUpdateResponse(nullptr) {};
  virtual ~InfoUpdateResponse();

  InfoUpdateResponse(const InfoUpdateResponse& from);
  InfoUpdateResponse(InfoUpdateResponse&& from) noexcept
    : InfoUpdateResponse() {
    *this = ::std::move(from);
  }

  inline InfoUpdateResponse& operator=(const InfoUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoUpdateResponse& operator=(InfoUpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfoUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const InfoUpdateResponse*>(
               &_InfoUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InfoUpdateResponse& a, InfoUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoUpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoUpdateResponse* New() const final {
    return CreateMaybeMessage<InfoUpdateResponse>(nullptr);
  }

  InfoUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoUpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoUpdateResponse& from);
  void MergeFrom(const InfoUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.InfoUpdateResponse";
  }
  protected:
  explicit InfoUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fmsg_2eproto);
    return ::descriptor_table_rpc_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoRetFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // .mrpc.AccountInfo info_ret = 1;
  bool has_info_ret() const;
  private:
  bool _internal_has_info_ret() const;
  public:
  void clear_info_ret();
  const ::mrpc::AccountInfo& info_ret() const;
  ::mrpc::AccountInfo* release_info_ret();
  ::mrpc::AccountInfo* mutable_info_ret();
  void set_allocated_info_ret(::mrpc::AccountInfo* info_ret);
  private:
  const ::mrpc::AccountInfo& _internal_info_ret() const;
  ::mrpc::AccountInfo* _internal_mutable_info_ret();
  public:
  void unsafe_arena_set_allocated_info_ret(
      ::mrpc::AccountInfo* info_ret);
  ::mrpc::AccountInfo* unsafe_arena_release_info_ret();

  // .mrpc.RpcErrCode err_code = 2;
  void clear_err_code();
  ::mrpc::RpcErrCode err_code() const;
  void set_err_code(::mrpc::RpcErrCode value);
  private:
  ::mrpc::RpcErrCode _internal_err_code() const;
  void _internal_set_err_code(::mrpc::RpcErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:mrpc.InfoUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mrpc::AccountInfo* info_ret_;
  int err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountInfo

// string name = 1;
inline void AccountInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::name() const {
  // @@protoc_insertion_point(field_get:mrpc.AccountInfo.name)
  return _internal_name();
}
inline void AccountInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mrpc.AccountInfo.name)
}
inline std::string* AccountInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mrpc.AccountInfo.name)
  return _internal_mutable_name();
}
inline const std::string& AccountInfo::_internal_name() const {
  return name_.Get();
}
inline void AccountInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.AccountInfo.name)
}
inline void AccountInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.AccountInfo.name)
}
inline void AccountInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.AccountInfo.name)
}
inline std::string* AccountInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_name() {
  // @@protoc_insertion_point(field_release:mrpc.AccountInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.AccountInfo.name)
}
inline std::string* AccountInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.AccountInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.AccountInfo.name)
}

// string description = 2;
inline void AccountInfo::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::description() const {
  // @@protoc_insertion_point(field_get:mrpc.AccountInfo.description)
  return _internal_description();
}
inline void AccountInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mrpc.AccountInfo.description)
}
inline std::string* AccountInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mrpc.AccountInfo.description)
  return _internal_mutable_description();
}
inline const std::string& AccountInfo::_internal_description() const {
  return description_.Get();
}
inline void AccountInfo::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.AccountInfo.description)
}
inline void AccountInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.AccountInfo.description)
}
inline void AccountInfo::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.AccountInfo.description)
}
inline std::string* AccountInfo::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_description() {
  // @@protoc_insertion_point(field_release:mrpc.AccountInfo.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.AccountInfo.description)
}
inline std::string* AccountInfo::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.AccountInfo.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountInfo::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.AccountInfo.description)
}

// -------------------------------------------------------------------

// InfoUpdateRequest

// string service_name = 1;
inline void InfoUpdateRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoUpdateRequest::service_name() const {
  // @@protoc_insertion_point(field_get:mrpc.InfoUpdateRequest.service_name)
  return _internal_service_name();
}
inline void InfoUpdateRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:mrpc.InfoUpdateRequest.service_name)
}
inline std::string* InfoUpdateRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:mrpc.InfoUpdateRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& InfoUpdateRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void InfoUpdateRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoUpdateRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.InfoUpdateRequest.service_name)
}
inline void InfoUpdateRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.InfoUpdateRequest.service_name)
}
inline void InfoUpdateRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.InfoUpdateRequest.service_name)
}
inline std::string* InfoUpdateRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoUpdateRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:mrpc.InfoUpdateRequest.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoUpdateRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.InfoUpdateRequest.service_name)
}
inline std::string* InfoUpdateRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.InfoUpdateRequest.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoUpdateRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.InfoUpdateRequest.service_name)
}

// string method_name = 2;
inline void InfoUpdateRequest::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoUpdateRequest::method_name() const {
  // @@protoc_insertion_point(field_get:mrpc.InfoUpdateRequest.method_name)
  return _internal_method_name();
}
inline void InfoUpdateRequest::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:mrpc.InfoUpdateRequest.method_name)
}
inline std::string* InfoUpdateRequest::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:mrpc.InfoUpdateRequest.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& InfoUpdateRequest::_internal_method_name() const {
  return method_name_.Get();
}
inline void InfoUpdateRequest::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoUpdateRequest::set_method_name(std::string&& value) {
  
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.InfoUpdateRequest.method_name)
}
inline void InfoUpdateRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.InfoUpdateRequest.method_name)
}
inline void InfoUpdateRequest::set_method_name(const char* value,
    size_t size) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.InfoUpdateRequest.method_name)
}
inline std::string* InfoUpdateRequest::_internal_mutable_method_name() {
  
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoUpdateRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:mrpc.InfoUpdateRequest.method_name)
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoUpdateRequest::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.InfoUpdateRequest.method_name)
}
inline std::string* InfoUpdateRequest::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.InfoUpdateRequest.method_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoUpdateRequest::unsafe_arena_set_allocated_method_name(
    std::string* method_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.InfoUpdateRequest.method_name)
}

// .mrpc.AccountInfo info = 3;
inline bool InfoUpdateRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool InfoUpdateRequest::has_info() const {
  return _internal_has_info();
}
inline void InfoUpdateRequest::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::mrpc::AccountInfo& InfoUpdateRequest::_internal_info() const {
  const ::mrpc::AccountInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mrpc::AccountInfo*>(
      &::mrpc::_AccountInfo_default_instance_);
}
inline const ::mrpc::AccountInfo& InfoUpdateRequest::info() const {
  // @@protoc_insertion_point(field_get:mrpc.InfoUpdateRequest.info)
  return _internal_info();
}
inline void InfoUpdateRequest::unsafe_arena_set_allocated_info(
    ::mrpc::AccountInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.InfoUpdateRequest.info)
}
inline ::mrpc::AccountInfo* InfoUpdateRequest::release_info() {
  auto temp = unsafe_arena_release_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mrpc::AccountInfo* InfoUpdateRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:mrpc.InfoUpdateRequest.info)
  
  ::mrpc::AccountInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::mrpc::AccountInfo* InfoUpdateRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mrpc::AccountInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::mrpc::AccountInfo* InfoUpdateRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:mrpc.InfoUpdateRequest.info)
  return _internal_mutable_info();
}
inline void InfoUpdateRequest::set_allocated_info(::mrpc::AccountInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:mrpc.InfoUpdateRequest.info)
}

// string new_description = 4;
inline void InfoUpdateRequest::clear_new_description() {
  new_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InfoUpdateRequest::new_description() const {
  // @@protoc_insertion_point(field_get:mrpc.InfoUpdateRequest.new_description)
  return _internal_new_description();
}
inline void InfoUpdateRequest::set_new_description(const std::string& value) {
  _internal_set_new_description(value);
  // @@protoc_insertion_point(field_set:mrpc.InfoUpdateRequest.new_description)
}
inline std::string* InfoUpdateRequest::mutable_new_description() {
  // @@protoc_insertion_point(field_mutable:mrpc.InfoUpdateRequest.new_description)
  return _internal_mutable_new_description();
}
inline const std::string& InfoUpdateRequest::_internal_new_description() const {
  return new_description_.Get();
}
inline void InfoUpdateRequest::_internal_set_new_description(const std::string& value) {
  
  new_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InfoUpdateRequest::set_new_description(std::string&& value) {
  
  new_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.InfoUpdateRequest.new_description)
}
inline void InfoUpdateRequest::set_new_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.InfoUpdateRequest.new_description)
}
inline void InfoUpdateRequest::set_new_description(const char* value,
    size_t size) {
  
  new_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.InfoUpdateRequest.new_description)
}
inline std::string* InfoUpdateRequest::_internal_mutable_new_description() {
  
  return new_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InfoUpdateRequest::release_new_description() {
  // @@protoc_insertion_point(field_release:mrpc.InfoUpdateRequest.new_description)
  return new_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfoUpdateRequest::set_allocated_new_description(std::string* new_description) {
  if (new_description != nullptr) {
    
  } else {
    
  }
  new_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.InfoUpdateRequest.new_description)
}
inline std::string* InfoUpdateRequest::unsafe_arena_release_new_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.InfoUpdateRequest.new_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InfoUpdateRequest::unsafe_arena_set_allocated_new_description(
    std::string* new_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_description != nullptr) {
    
  } else {
    
  }
  new_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.InfoUpdateRequest.new_description)
}

// -------------------------------------------------------------------

// InfoUpdateResponse

// .mrpc.AccountInfo info_ret = 1;
inline bool InfoUpdateResponse::_internal_has_info_ret() const {
  return this != internal_default_instance() && info_ret_ != nullptr;
}
inline bool InfoUpdateResponse::has_info_ret() const {
  return _internal_has_info_ret();
}
inline void InfoUpdateResponse::clear_info_ret() {
  if (GetArena() == nullptr && info_ret_ != nullptr) {
    delete info_ret_;
  }
  info_ret_ = nullptr;
}
inline const ::mrpc::AccountInfo& InfoUpdateResponse::_internal_info_ret() const {
  const ::mrpc::AccountInfo* p = info_ret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mrpc::AccountInfo*>(
      &::mrpc::_AccountInfo_default_instance_);
}
inline const ::mrpc::AccountInfo& InfoUpdateResponse::info_ret() const {
  // @@protoc_insertion_point(field_get:mrpc.InfoUpdateResponse.info_ret)
  return _internal_info_ret();
}
inline void InfoUpdateResponse::unsafe_arena_set_allocated_info_ret(
    ::mrpc::AccountInfo* info_ret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_ret_);
  }
  info_ret_ = info_ret;
  if (info_ret) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.InfoUpdateResponse.info_ret)
}
inline ::mrpc::AccountInfo* InfoUpdateResponse::release_info_ret() {
  auto temp = unsafe_arena_release_info_ret();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mrpc::AccountInfo* InfoUpdateResponse::unsafe_arena_release_info_ret() {
  // @@protoc_insertion_point(field_release:mrpc.InfoUpdateResponse.info_ret)
  
  ::mrpc::AccountInfo* temp = info_ret_;
  info_ret_ = nullptr;
  return temp;
}
inline ::mrpc::AccountInfo* InfoUpdateResponse::_internal_mutable_info_ret() {
  
  if (info_ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::mrpc::AccountInfo>(GetArena());
    info_ret_ = p;
  }
  return info_ret_;
}
inline ::mrpc::AccountInfo* InfoUpdateResponse::mutable_info_ret() {
  // @@protoc_insertion_point(field_mutable:mrpc.InfoUpdateResponse.info_ret)
  return _internal_mutable_info_ret();
}
inline void InfoUpdateResponse::set_allocated_info_ret(::mrpc::AccountInfo* info_ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_ret_;
  }
  if (info_ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info_ret);
    if (message_arena != submessage_arena) {
      info_ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_ret, submessage_arena);
    }
    
  } else {
    
  }
  info_ret_ = info_ret;
  // @@protoc_insertion_point(field_set_allocated:mrpc.InfoUpdateResponse.info_ret)
}

// .mrpc.RpcErrCode err_code = 2;
inline void InfoUpdateResponse::clear_err_code() {
  err_code_ = 0;
}
inline ::mrpc::RpcErrCode InfoUpdateResponse::_internal_err_code() const {
  return static_cast< ::mrpc::RpcErrCode >(err_code_);
}
inline ::mrpc::RpcErrCode InfoUpdateResponse::err_code() const {
  // @@protoc_insertion_point(field_get:mrpc.InfoUpdateResponse.err_code)
  return _internal_err_code();
}
inline void InfoUpdateResponse::_internal_set_err_code(::mrpc::RpcErrCode value) {
  
  err_code_ = value;
}
inline void InfoUpdateResponse::set_err_code(::mrpc::RpcErrCode value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:mrpc.InfoUpdateResponse.err_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mrpc::RpcErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrpc::RpcErrCode>() {
  return ::mrpc::RpcErrCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fmsg_2eproto
